
import java.awt.Color;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.*;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author markl
 */
public class RegisterGUI extends javax.swing.JFrame {

    /**
     * Creates new form RegisterGUI
     */
    public RegisterGUI() {
        initComponents();
        // center the form
        this.setLocationRelativeTo(null);
        // change color of background
        this.getContentPane().setBackground(new Color(48, 213, 200));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        lblState = new javax.swing.JLabel();
        lblZip = new javax.swing.JLabel();
        lblRegUser = new javax.swing.JLabel();
        lblRegPass = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtState = new javax.swing.JTextField();
        txtZip = new javax.swing.JTextField();
        txtRegUser = new javax.swing.JTextField();
        txtRegPass = new javax.swing.JPasswordField();
        bttnRegister = new javax.swing.JButton();
        bttnRegExit = new javax.swing.JButton();
        bttnClr = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GB Manufacturing");

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabel1.setText("Registration Form");

        lblName.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblName.setText("Name:");

        lblAddress.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblAddress.setText("Street Address:");

        lblCity.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblCity.setText("City:");

        lblState.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblState.setText("State:");

        lblZip.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblZip.setText("Zip");

        lblRegUser.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblRegUser.setText("Username:");

        lblRegPass.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblRegPass.setText("Password:");

        txtAddress.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        txtAddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAddressKeyReleased(evt);
            }
        });

        txtName.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        txtName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNameKeyReleased(evt);
            }
        });

        txtCity.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        txtCity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCityKeyReleased(evt);
            }
        });

        txtState.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        txtState.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtStateKeyReleased(evt);
            }
        });

        txtZip.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        txtZip.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtZipKeyReleased(evt);
            }
        });

        txtRegUser.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        txtRegUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRegUserKeyReleased(evt);
            }
        });

        txtRegPass.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        txtRegPass.setAutoscrolls(false);
        txtRegPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRegPassKeyReleased(evt);
            }
        });

        bttnRegister.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        bttnRegister.setText("Register");
        bttnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnRegisterActionPerformed(evt);
            }
        });

        bttnRegExit.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        bttnRegExit.setText("Exit");
        bttnRegExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnRegExitActionPerformed(evt);
            }
        });

        bttnClr.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        bttnClr.setText("Clear");
        bttnClr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnClrActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(288, 288, 288)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblAddress)
                                .addGap(18, 18, 18)
                                .addComponent(txtAddress))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblName)
                                .addGap(110, 110, 110)
                                .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCity)
                                    .addComponent(lblState)
                                    .addComponent(lblZip)
                                    .addComponent(lblRegUser)
                                    .addComponent(lblRegPass))
                                .addGap(66, 66, 66)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtRegUser, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtZip, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtState, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtCity)
                                    .addComponent(txtRegPass)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bttnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bttnClr, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)))
                .addGap(81, 81, 81)
                .addComponent(bttnRegExit, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(97, 97, 97))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblName)
                    .addComponent(txtName))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtAddress)
                    .addComponent(lblAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity)
                    .addComponent(txtCity))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblState)
                    .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblZip)
                    .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRegUser)
                    .addComponent(txtRegUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblRegPass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtRegPass))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bttnRegister)
                    .addComponent(bttnRegExit)
                    .addComponent(bttnClr))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void bttnRegExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnRegExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_bttnRegExitActionPerformed

    private void bttnClrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnClrActionPerformed
        // Clear the entire textfield
        clear();

    }//GEN-LAST:event_bttnClrActionPerformed

    private void bttnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnRegisterActionPerformed
        try {
            submitRegistration();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(RegisterGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(RegisterGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }//GEN-LAST:event_bttnRegisterActionPerformed

    private void txtCityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCityKeyReleased
        // Change background to red until valid
        validateInputs();
    }//GEN-LAST:event_txtCityKeyReleased

    private void txtNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNameKeyReleased
        // Change background to red until valid
        validateInputs();
    }//GEN-LAST:event_txtNameKeyReleased

    private void txtAddressKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAddressKeyReleased
        // Change background to red until valid
        validateInputs();
    }//GEN-LAST:event_txtAddressKeyReleased

    private void txtStateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStateKeyReleased
        // Change background to red until valid
        validateInputs();
    }//GEN-LAST:event_txtStateKeyReleased

    private void txtZipKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtZipKeyReleased
        // Change background to red until valid
        validateInputs();
    }//GEN-LAST:event_txtZipKeyReleased

    private void txtRegUserKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRegUserKeyReleased
        // Change background to red until valid
        validateInputs();
    }//GEN-LAST:event_txtRegUserKeyReleased

    private void txtRegPassKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRegPassKeyReleased
        // Change background to red until valid
        validateInputs();
    }//GEN-LAST:event_txtRegPassKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegisterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegisterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegisterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegisterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegisterGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bttnClr;
    private javax.swing.JButton bttnRegExit;
    private javax.swing.JButton bttnRegister;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblRegPass;
    private javax.swing.JLabel lblRegUser;
    private javax.swing.JLabel lblState;
    private javax.swing.JLabel lblZip;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtRegPass;
    private javax.swing.JTextField txtRegUser;
    private javax.swing.JTextField txtState;
    private javax.swing.JTextField txtZip;
    // End of variables declaration//GEN-END:variables
    // Input Validation

    private String validateInputs() {
        StringBuilder errors = new StringBuilder();

        // get inputs from user using the textboxes
        String emp_Name = txtName.getText();
        String emp_Address = txtAddress.getText();
        String emp_City = txtCity.getText();
        String emp_State = txtState.getText();
        String emp_ZipText = txtZip.getText();
        String emp_Username = txtRegUser.getText();
        String emp_Password = txtRegPass.getText();

        if (emp_Name.isBlank()) {
            errors.append("Please provide your name.\n");
            txtName.setBackground(Color.red);
        } else {
            txtName.setBackground(Color.white);
        }

        // Check if emp_Address meets the criteria
        if (emp_Address.isBlank() || emp_Address.length() < 5) {
            errors.append("Please provide a valid address (at least 5 characters).\n");
            if (emp_Address.length() < 4) {
                txtAddress.setBackground(Color.red);
            }
        } else {
            txtAddress.setBackground(Color.white);
        }

        // Check if emp_City meets the criteria
        if (emp_City.isBlank() || emp_City.length() < 5) {
            errors.append("Please provide a valid city (at least 5 characters).\n");
            txtCity.setBackground(Color.red);
        } else {
            txtCity.setBackground(Color.white);
        }

        // Check if emp_State meets the criteria
        if (emp_State.isBlank() || emp_State.length() < 2 || emp_State.matches(".*\\d.*")) {
            errors.append("Please provide a valid state (at least 2 characters and no digits).\n");
            txtState.setBackground(Color.red);
        } else {
            txtState.setBackground(Color.white);
        }

        // Check if emp_Zip meets the criteria
        int emp_Zip = 0;
        try {
            emp_Zip = Integer.parseInt(emp_ZipText);
            if (String.valueOf(emp_Zip).length() != 5) {
                errors.append("Please provide a valid 5-digit zip code.\n");
                txtZip.setBackground(Color.red);
            } else {
                txtZip.setBackground(Color.white);
            }
        } catch (NumberFormatException e) {
            errors.append("Please provide a valid 5-digit zip code.\n");
            txtZip.setBackground(Color.red);
        }

        // Check if emp_Username meets the criteria
        if (emp_Username.isBlank() || emp_Username.length() < 11) {
            errors.append("Please provide a valid username (at least 12 characters long).\n");
            txtRegUser.setBackground(Color.red);
        } else {
            txtRegUser.setBackground(Color.white);
        }

        // Check if emp_Password meets the criteria
        if (emp_Password.isBlank() || emp_Password.length() < 11
                || !Pattern.compile("^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[!@#$%^&+=]).*$").matcher(emp_Password).matches()) {
            errors.append("Please provide a valid password (at least 12 characters long, containing at least one uppercase letter, one lowercase letter, one digit, and one special character).\n");
            txtRegPass.setBackground(Color.red);
        } else {
            txtRegPass.setBackground(Color.white);
        }

        return errors.toString();
    }

    private void submitRegistration() throws ClassNotFoundException, SQLException {
        String validationErrors = validateInputs();

        if (!validationErrors.isEmpty()) {
            // Display all error messages
            JOptionPane.showMessageDialog(this, "Registration Failed:\n" + validationErrors);
        } else {
            // Proceed with registration
            String emp_Name = txtName.getText();
            String emp_Address = txtAddress.getText();
            String emp_City = txtCity.getText();
            String emp_State = txtState.getText();
            int emp_Zip = Integer.parseInt(txtZip.getText());
            String emp_Username = txtRegUser.getText();
            String emp_Password = txtRegPass.getText();

            Register emp = new Register(emp_Name, emp_Address, emp_City, emp_State, emp_Zip, emp_Username, emp_Password);
            DataIO db = new DataIO();
            try {
                db.addEmployeeData(emp);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(RegisterGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(RegisterGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            clear();
            JOptionPane.showMessageDialog(this, "Registration Successful");
        }
    }

    private void clear() {
        // Clear the entire textfield
        txtName.setText("");
        txtName.setBackground(Color.white);
        txtAddress.setText("");
        txtAddress.setBackground(Color.white);
        txtCity.setText("");
        txtCity.setBackground(Color.white);
        txtState.setText("");
        txtState.setBackground(Color.white);
        txtZip.setText("");
        txtZip.setBackground(Color.white);
        txtRegUser.setText("");
        txtRegUser.setBackground(Color.white);
        txtRegPass.setText("");
        txtRegPass.setBackground(Color.white);
    }
}
